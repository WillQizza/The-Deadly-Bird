"""
Django settings for deadlybird project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import sys
import dj_database_url
import stripe

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-!nezhdbxb@-tn@fxu41lv02cil*n$s5gcyr9ofskmv^0vd5#4!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# If we are running tests
TESTING = sys.argv[1:2] == ['test']

ALLOWED_HOSTS = [
  'thedeadlybird.willqi.dev',
  'http://localhost:3000',
  'http://localhost:3001',
  'http://localhost:8000',
  'http://127.0.0.1:8000',
  'localhost',
  '127.0.0.1',
  'host.docker.internal'
]
CSRF_TRUSTED_ORIGINS = [
  'https://thedeadlybird.willqi.dev',
  'http://localhost:3000',
  'http://localhost:3001',
  'http://localhost:8000',
  'http://127.0.0.1:3000',
  'http://127.0.0.1:8000',
  'http://host.docker.internal:8000',
  'http://host.docker.internal:8001'
]

CORS_ALLOWED_ORIGINS = CSRF_TRUSTED_ORIGINS
CORS_ALLOW_CREDENTIALS = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'react',
    'following',
    'identity',
    'likes',
    'posts',
    'nodes',
    'drf_spectacular',
    'blue'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'deadlybird.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'deadlybird.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

IS_DOCKER_APP = "DOCKER" in os.environ
if IS_DOCKER_APP:
    print("[Docker Detected]")
    if not os.path.exists(BASE_DIR / "data"):
        os.makedirs(BASE_DIR / "data")
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "data" / "db.sqlite3",
        }
    }
else:
    # Not docker
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


STATIC_ROOT = BASE_DIR / 'static'

APPEND_SLASH = True

# Pagination
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'deadlybird.authentication.RemoteNodeAuthentication'
    ]
}

# Used for internode communication
SITE_HOST_URL = os.environ.get("HOST_URL", "http://localhost:8000")
SITE_REMOTE_AUTH_USERNAME = os.environ.get("REMOTE_AUTH_USERNAME", "username")
SITE_REMOTE_AUTH_PASSWORD = os.environ.get("REMOTE_AUTH_PASSWORD", "password")

# In the case scenario of localhost testing, we can override the cookie name
SESSION_COOKIE_NAME = os.environ.get("COOKIE_NAME", "sessionid")

GITHUB_API_TOKEN = None if len(os.environ.get("GITHUB_API_TOKEN", "")) == 0 else os.environ.get("GITHUB_API_TOKEN")

# Stripe related details
stripe.api_key = os.environ.get("STRIPE_API_KEY", "sk_test_51OIZXzLmClgbbAeLhE6c2Ji2YmVtNSSGWq91H8xBDl7BKGwKz5QaeutsBEXWtL495ysuRBXDHypPiBQvzGyPo5Hb00RIPGJiOU")
WEBHOOK_SUBSCRIPTION_SECRET = os.environ.get("STRIPE_WEBHOOK_SECRET", "")
MONTHLY_SUBSCRIPTION_ITEM_ID = os.environ.get("STRIPE_MONTHLY_PRICE_ID", "price_1P2fzcLmClgbbAeLjS9LdyXx")
YEARLY_SUBSCRIPTION_ITEM_ID = os.environ.get("STRIPE_YEARLY_PRICE_ID", "price_1P2oY2LmClgbbAeL92dGotVx")